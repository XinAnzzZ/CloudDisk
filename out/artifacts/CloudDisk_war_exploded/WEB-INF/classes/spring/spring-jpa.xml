<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns="http://www.springframework.org/schema/beans"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd" default-lazy-init="true">

    <description>数据库相关 配置相关</description>

    <bean id="druidLogFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="connectionLogEnabled" value="false"/>
        <property name="resultSetLogEnabled" value="false"/>
        <property name="statementParameterClearLogEnable" value="true"/>
    </bean>

    <!-- 阿里 druid数据库连接池 -->
    <!-- 详细配置参数: https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="proxyFilters">
            <list>
                <ref bean="druidLogFilter"/>
            </list>
        </property>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="filters" value="${jdbc.filters}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/>
        <property name="connectionProperties" value="${jdbc.connectionProperties}"/>
        <property name="defaultAutoCommit" value="false"/>
    </bean>

    <bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource"/>
    </bean>

    <!-- JPA实体管理工厂的配置 -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSourceProxy"/>
        <!-- 指定Jpa持久化实现厂商类 - hibernate -->
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <!-- 指定Entity实体类包路径 -->
        <property name="packagesToScan">
            <list>
                <value>com.java.myh.cloud.core.entity</value>
            </list>
        </property>
        <property name="persistenceUnitName" value="cmcUnit"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.show_sql">${jpa.showsql}</prop>
                <prop key="hibernate.format_sql">${jpa.formatsql}</prop>
                <prop key="javax.persistence.sharedCache.mode">${jpa.javax.persistence.sharedCache.mode}</prop>
                <prop key="hibernate.generate_statistics">${jpa.hibernate.generate_statistics}</prop>
                <prop key="hibernate.cache.use_query_cache">${jpa.hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.dialect">${jpa.hibernate.dialect}</prop>
                <prop key="hibernate.event.merge.entity_copy_observer">
                    ${jpa.hibernate.event.merge.entity_copy_observer}
                </prop>
                <prop key="hibernate.globally_quoted_identifiers">
                    ${jpa.hibernate.globally_quoted_identifiers}
                </prop>

                <!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
                <prop key="hibernate.archive.autodetection">${jpa.hibernate.archive.autodetection}</prop>
                <prop key="hibernate.max_fetch_depth">${jpa.hibernate.max_fetch_depth}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">
                    ${jpa.hibernate.bytecode.use_reflection_optimizer}
                </prop>

            </props>
        </property>
    </bean>

    <!-- 启用扫描并自动创建代理的功能 -->
    <jpa:repositories base-package="com.java.myh.cloud.repository"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"/>

    <!-- 指定实现JPA的适配器 -->
    <bean id="hibernateJpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>


    <!-- 开启注解事务 -->
    <tx:annotation-driven proxy-target-class="true"/>
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut expression="execution(* com.java.myh.cloud.service..*.*(..))" id="fooServiceOperation"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
    </aop:config>

    <!-- jdbcTemplate为了方便使用SQL处理复杂的业务逻辑 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSourceProxy"/>
    </bean>

    <bean id="auditor" class="com.java.myh.cloud.common.data.NullAuditor"/>
    <jpa:auditing auditor-aware-ref="auditor"/>
</beans>